#!/usr/bin/env node
import prompts from "prompts";
import { execa } from "execa";
import fs from "fs-extra";
import path from "path";
import chalk from "chalk";

// Clear the console and display the logo
console.clear();
const logo = chalk.cyan(`
 ‚ñó‚ñÑ‚ñÑ‚ññ ‚ñó‚ñÑ‚ññ ‚ñó‚ñÑ‚ñÑ‚ñÑ  ‚ñó‚ñÑ‚ñÑ‚ñÑ‚ññ‚ñó‚ññ    ‚ñó‚ñÑ‚ññ ‚ñó‚ñÑ‚ñÑ‚ññ ‚ñó‚ñÑ‚ñÑ‚ñÑ   ‚ñó‚ñÑ‚ñÑ‚ññ     ‚ñó‚ñÑ‚ñÑ‚ññ‚ñó‚ñÑ‚ñÑ‚ñÑ‚ññ‚ñó‚ñÑ‚ññ  ‚ñó‚ñÑ‚ñÑ‚ññ‚ñó‚ññ ‚ñó‚ññ
‚ñê‚ñå   ‚ñê‚ñå ‚ñê‚ñå‚ñê‚ñå  ‚ñà ‚ñê‚ñå   ‚ñê‚ñå   ‚ñê‚ñå ‚ñê‚ñå‚ñê‚ñå ‚ñê‚ñå‚ñê‚ñå  ‚ñà ‚ñê‚ñå       ‚ñê‚ñå     ‚ñà ‚ñê‚ñå ‚ñê‚ñå‚ñê‚ñå   ‚ñê‚ñå‚ñó‚ñû‚ñò
‚ñê‚ñå   ‚ñê‚ñå ‚ñê‚ñå‚ñê‚ñå  ‚ñà ‚ñê‚ñõ‚ñÄ‚ñÄ‚ñò‚ñê‚ñå   ‚ñê‚ñå ‚ñê‚ñå‚ñê‚ñõ‚ñÄ‚ñö‚ññ‚ñê‚ñå  ‚ñà  ‚ñù‚ñÄ‚ñö‚ññ     ‚ñù‚ñÄ‚ñö‚ññ  ‚ñà ‚ñê‚ñõ‚ñÄ‚ñú‚ñå‚ñê‚ñå   ‚ñê‚ñõ‚ñö‚ññ 
‚ñù‚ñö‚ñÑ‚ñÑ‚ññ‚ñù‚ñö‚ñÑ‚ñû‚ñò‚ñê‚ñô‚ñÑ‚ñÑ‚ñÄ ‚ñê‚ñô‚ñÑ‚ñÑ‚ññ‚ñê‚ñô‚ñÑ‚ñÑ‚ññ‚ñù‚ñö‚ñÑ‚ñû‚ñò‚ñê‚ñå ‚ñê‚ñå‚ñê‚ñô‚ñÑ‚ñÑ‚ñÄ ‚ñó‚ñÑ‚ñÑ‚ñû‚ñò    ‚ñó‚ñÑ‚ñÑ‚ñû‚ñò  ‚ñà ‚ñê‚ñå ‚ñê‚ñå‚ñù‚ñö‚ñÑ‚ñÑ‚ññ‚ñê‚ñå ‚ñê‚ñå
`);

const footer = chalk.gray("                          codelords.cl by Chillenow\n");

console.log(logo);
console.log(footer);

// Main function to handle the CLI logic
async function main() {
    const response = await prompts([
        {
            type: "text",
            name: "projectName",
            message: "üõ†Ô∏è  Project name:",
        },
        {
            type: "select",
            name: "auth",
            message: "Include Auth.js (Email/Password)?",
            choices: [
                { title: "Yes", value: true },
                { title: "No", value: false },
            ],
            initial: 0,
        },
        {
            type: "select",
            name: "lemonsqueezy",
            message: "Include LemonSqueezy Payments?",
            choices: [
                { title: "Yes", value: true },
                { title: "No", value: false },
            ],
            initial: 0,
        },
    ]);

    // Convert yes/no answers to an array of selected features
    const features = [];
    if (response.auth) features.push("auth");
    if (response.lemonsqueezy) features.push("lemonsqueezy");

    const { projectName } = response;
    const projectPath = path.join(process.cwd(), projectName);

    console.log("üì¶ Copying base template...");
    await fs.copy(path.join(__dirname, "../templates/base"), projectPath).then(() => {
        // Now run the .env copy
        copyEnvFile(projectPath);
    });

    for (const feature of features) {
        console.log(`üîß Adding ${feature}...`);
        
        // If Auth.js was selected, copy the login page
        if (feature === "auth") {
            const loginPagePath = path.join(__dirname, "../templates/auth");
            const loginTargetPath = path.join(projectPath, "src/app");
            await fs.copy(loginPagePath, loginTargetPath);
            console.log("üß© Added login page template.");
        }
    }

    console.log("üì• Installing dependencies...");
    await execa("npm", ["install"], { cwd: projectPath, stdio: "inherit" });

    console.log("‚úÖ Codelords Stack is ready!");
}

// Function to copy the .env.example file to .env in the project directory
async function copyEnvFile(projectPath: string) {
    const templateEnvPath = path.join(__dirname, '../templates/base/env.example');
    const projectEnvPath = path.join(projectPath, '.env');

    try {
        const envAlreadyExists = await fs.pathExists(projectEnvPath);

        if (!envAlreadyExists) {
            await fs.copy(templateEnvPath, projectEnvPath);
            console.log("üîß .env created from template.");
        } else {
            console.log("‚ö†Ô∏è  Skipped .env creation ‚Äî file already exists.");
        }
    } catch (err) {
        console.error("‚ùå Failed to copy .env:", err);
    }
}

main();